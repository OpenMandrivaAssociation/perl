diff -up perl-5.34.0/ext/GDBM_File/GDBM_File.xs.0026~ perl-5.34.0/ext/GDBM_File/GDBM_File.xs
--- perl-5.34.0/ext/GDBM_File/GDBM_File.xs.0026~	2021-01-21 00:04:44.000000000 +0100
+++ perl-5.34.0/ext/GDBM_File/GDBM_File.xs	2021-06-27 13:56:56.281023584 +0200
@@ -13,6 +13,7 @@
 #define store_value 3
 
 typedef struct {
+	tTHX    owner;
 	GDBM_FILE 	dbp ;
 	SV *    filter[4];
 	int     filtering ;
@@ -276,6 +277,7 @@ gdbm_TIEHASH(dbtype, name, read_write, m
 	}
 	if (dbp) {
 	    RETVAL = (GDBM_File)safecalloc(1, sizeof(GDBM_File_type));
+	    RETVAL->owner = aTHX;
 	    RETVAL->dbp = dbp;
 	} else {
 	    RETVAL = NULL;
@@ -289,14 +291,16 @@ gdbm_DESTROY(db)
 	PREINIT:
 	int i = store_value;
     CODE:
-        if (gdbm_file_close(db)) {
-            croak("gdbm_close: %s; %s", gdbm_strerror(gdbm_errno),
-                  strerror(errno));
+	if (db && db->owner == aTHX) {
+		if (gdbm_file_close(db)) {
+		    croak("gdbm_close: %s; %s", gdbm_strerror(gdbm_errno),
+			  strerror(errno));
+		}
+		do {
+		    if (db->filter[i])
+			SvREFCNT_dec(db->filter[i]);
+		} while (i-- > 0);
 	}
-	do {
-	    if (db->filter[i])
-		SvREFCNT_dec(db->filter[i]);
-	} while (i-- > 0);
 	safefree(db);
 
 void
diff -up perl-5.34.0/ext/NDBM_File/NDBM_File.xs.0026~ perl-5.34.0/ext/NDBM_File/NDBM_File.xs
--- perl-5.34.0/ext/NDBM_File/NDBM_File.xs.0026~	2020-06-15 01:01:25.000000000 +0200
+++ perl-5.34.0/ext/NDBM_File/NDBM_File.xs	2021-06-27 13:53:46.514519654 +0200
@@ -33,6 +33,7 @@ END_EXTERN_C
 #define store_value 3
 
 typedef struct {
+	tTHX    owner;
 	DBM * 	dbp ;
 	SV *    filter[4];
 	int     filtering ;
@@ -71,6 +72,7 @@ ndbm_TIEHASH(dbtype, filename, flags, mo
 	    RETVAL = NULL ;
 	    if ((dbp =  dbm_open(filename, flags, mode))) {
 	        RETVAL = (NDBM_File)safecalloc(1, sizeof(NDBM_File_type));
+		RETVAL->owner = aTHX;
 		RETVAL->dbp = dbp ;
 	    }
 	    
@@ -84,12 +86,14 @@ ndbm_DESTROY(db)
 	PREINIT:
 	int i = store_value;
 	CODE:
-	dbm_close(db->dbp);
-	do {
-	    if (db->filter[i])
-		SvREFCNT_dec(db->filter[i]);
-	} while (i-- > 0);
-	safefree(db);
+	if (db && db->owner == aTHX) {
+	    dbm_close(db->dbp);
+	    do {
+		if (db->filter[i])
+		    SvREFCNT_dec(db->filter[i]);
+	    } while (i-- > 0);
+	    safefree(db);
+	}
 
 #define ndbm_FETCH(db,key)			dbm_fetch(db->dbp,key)
 datum_value
diff -up perl-5.34.0/ext/ODBM_File/ODBM_File.xs.0026~ perl-5.34.0/ext/ODBM_File/ODBM_File.xs
--- perl-5.34.0/ext/ODBM_File/ODBM_File.xs.0026~	2021-01-21 00:04:44.000000000 +0100
+++ perl-5.34.0/ext/ODBM_File/ODBM_File.xs	2021-06-27 13:53:46.514519654 +0200
@@ -49,6 +49,7 @@ datum	nextkey(datum key);
 #define store_value 3
 
 typedef struct {
+	tTHX    owner;
 	void * 	dbp ;
 	SV *    filter[4];
 	int     filtering ;
@@ -137,6 +138,7 @@ odbm_TIEHASH(dbtype, filename, flags, mo
 	    }
 	    dbp = (void*)(dbminit(filename) >= 0 ? &dbmrefcnt : 0);
 	    RETVAL = (ODBM_File)safecalloc(1, sizeof(ODBM_File_type));
+	    RETVAL->owner = aTHX;
 	    RETVAL->dbp = dbp ;
 	}
 	OUTPUT:
@@ -149,13 +151,15 @@ DESTROY(db)
 	dMY_CXT;
 	int i = store_value;
 	CODE:
-	dbmrefcnt--;
-	dbmclose();
-	do {
-	    if (db->filter[i])
-		SvREFCNT_dec(db->filter[i]);
-	} while (i-- > 0);
-	safefree(db);
+	if (db && db->owner == aTHX) {
+	    dbmrefcnt--;
+	    dbmclose();
+	    do {
+		if (db->filter[i])
+		    SvREFCNT_dec(db->filter[i]);
+	    } while (i-- > 0);
+	    safefree(db);
+	}
 
 datum_value
 odbm_FETCH(db, key)
diff -up perl-5.34.0/ext/SDBM_File/SDBM_File.xs.0026~ perl-5.34.0/ext/SDBM_File/SDBM_File.xs
--- perl-5.34.0/ext/SDBM_File/SDBM_File.xs.0026~	2020-06-15 01:01:25.000000000 +0200
+++ perl-5.34.0/ext/SDBM_File/SDBM_File.xs	2021-06-27 13:53:46.514519654 +0200
@@ -10,6 +10,7 @@
 #define store_value 3
 
 typedef struct {
+	tTHX    owner;
 	DBM * 	dbp ;
 	SV *    filter[4];
 	int     filtering ;
@@ -51,6 +52,7 @@ sdbm_TIEHASH(dbtype, filename, flags, mo
 	    }
 	    if (dbp) {
 	        RETVAL = (SDBM_File)safecalloc(1, sizeof(SDBM_File_type));
+		RETVAL->owner = aTHX;
 		RETVAL->dbp = dbp ;
 	    }
 	    
@@ -62,7 +64,7 @@ void
 sdbm_DESTROY(db)
 	SDBM_File	db
 	CODE:
-	if (db) {
+	if (db && db->owner == aTHX) {
 	    int i = store_value;
 	    sdbm_close(db->dbp);
 	    do {
diff -up perl-5.34.0/t/lib/dbmt_common.pl.0026~ perl-5.34.0/t/lib/dbmt_common.pl
--- perl-5.34.0/t/lib/dbmt_common.pl.0026~	2020-06-15 01:01:25.000000000 +0200
+++ perl-5.34.0/t/lib/dbmt_common.pl	2021-06-27 13:53:46.514519654 +0200
@@ -510,5 +510,40 @@ unlink <Op_dbmx*>, $Dfile;
    unlink <Op1_dbmx*>;
 }
 
+{
+   # Check DBM back-ends do not destroy objects from then-spawned threads.
+   # RT#61912.
+   SKIP: {
+      my $threads_count = 2;
+      skip 'Threads are disabled', 3 + 2 * $threads_count
+        unless $Config{usethreads};
+      use_ok('threads');
+
+      my %h;
+      unlink <Op1_dbmx*>;
+
+      my $db = tie %h, $DBM_Class, 'Op1_dbmx', $create, 0640;
+      isa_ok($db, $DBM_Class);
+
+      for (1 .. 2) {
+         ok(threads->create(
+            sub {
+               $SIG{'__WARN__'} = sub { fail(shift) }; # debugging perl panics
+                        # report it by spurious TAP line
+               1;
+            }), "Thread $_ created");
+      }
+      for (threads->list) {
+         is($_->join, 1, "A thread exited successfully");
+      }
+
+      pass("Tied object survived exiting threads");
+
+      undef $db;
+      untie %h;
+      unlink <Op1_dbmx*>;
+   }
+}
+
 done_testing();
 1;
